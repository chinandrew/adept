// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// median_cpp
double median_cpp(NumericVector x);
RcppExport SEXP _adept_median_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(median_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// update_pmax_max_cpp
List update_pmax_max_cpp(NumericVector new_vec, int new_idx, NumericVector old_vec, NumericVector old_idxs);
RcppExport SEXP _adept_update_pmax_max_cpp(SEXP new_vecSEXP, SEXP new_idxSEXP, SEXP old_vecSEXP, SEXP old_idxsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type new_vec(new_vecSEXP);
    Rcpp::traits::input_parameter< int >::type new_idx(new_idxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type old_vec(old_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type old_idxs(old_idxsSEXP);
    rcpp_result_gen = Rcpp::wrap(update_pmax_max_cpp(new_vec, new_idx, old_vec, old_idxs));
    return rcpp_result_gen;
END_RCPP
}
// pmax_max_cpp
List pmax_max_cpp(List args);
RcppExport SEXP _adept_pmax_max_cpp(SEXP argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type args(argsSEXP);
    rcpp_result_gen = Rcpp::wrap(pmax_max_cpp(args));
    return rcpp_result_gen;
END_RCPP
}
// convolve_cpp
NumericVector convolve_cpp(const NumericVector a, const NumericVector b);
RcppExport SEXP _adept_convolve_cpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve_cpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// sliding_cor_sd_cpp
NumericVector sliding_cor_sd_cpp(const NumericVector shortvec, const NumericVector longvec, const NumericVector sd_longvec_current);
RcppExport SEXP _adept_sliding_cor_sd_cpp(SEXP shortvecSEXP, SEXP longvecSEXP, SEXP sd_longvec_currentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type shortvec(shortvecSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type longvec(longvecSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type sd_longvec_current(sd_longvec_currentSEXP);
    rcpp_result_gen = Rcpp::wrap(sliding_cor_sd_cpp(shortvec, longvec, sd_longvec_current));
    return rcpp_result_gen;
END_RCPP
}
// sliding_cor_store_sd_cpp
List sliding_cor_store_sd_cpp(const NumericVector shortvec, const NumericVector longvec);
RcppExport SEXP _adept_sliding_cor_store_sd_cpp(SEXP shortvecSEXP, SEXP longvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type shortvec(shortvecSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type longvec(longvecSEXP);
    rcpp_result_gen = Rcpp::wrap(sliding_cor_store_sd_cpp(shortvec, longvec));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_adept_median_cpp", (DL_FUNC) &_adept_median_cpp, 1},
    {"_adept_update_pmax_max_cpp", (DL_FUNC) &_adept_update_pmax_max_cpp, 4},
    {"_adept_pmax_max_cpp", (DL_FUNC) &_adept_pmax_max_cpp, 1},
    {"_adept_convolve_cpp", (DL_FUNC) &_adept_convolve_cpp, 2},
    {"_adept_sliding_cor_sd_cpp", (DL_FUNC) &_adept_sliding_cor_sd_cpp, 3},
    {"_adept_sliding_cor_store_sd_cpp", (DL_FUNC) &_adept_sliding_cor_store_sd_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_adept(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
