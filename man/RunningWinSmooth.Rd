% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RunningWinSmooth.R
\name{RunningWinSmooth}
\alias{RunningWinSmooth}
\title{Fast Computation of Moving Window Average}
\usage{
RunningWinSmooth(x, W, x.fs = 1)
}
\arguments{
\item{x}{A numeric vector.}

\item{W}{A width of a moving window given in time (seconds).}

\item{x.fs}{Frequency of \code{x} expressed in number of observations collected
per second. Defaults to \code{1}.}
}
\value{
A numeric vector of moving window average.
}
\description{
Computes moving window average of a vector via Fast Fourier Transform.
The tails of the output vector where the moving window is undefined are filled with \code{NA}.
}
\details{
Frequency of \code{x} and a width of a moving window given in time (seconds) determines
\code{W.vl = W * x.fs}, a width of a moving window given in vector length.
If \code{W.vl} is  \eqn{W.vl < 3} then an error is thrown. If \code{W.vl} is an even number, then the
value \code{W.vl-1} is silently used as a width of a moving window instead.

Implementation uses convolution computed via Fast Fourier Transform,
which is expected to reduce computational time, especially
for a long \code{x} vector, compared to conventional convolution computation.
}
\examples{
## trivial example f(x) = x
N <- 100
W  <- 20
x <- 1:N
x.smoothed <- RunningWinSmooth(x, W)
\dontrun{
plot(x, type = "l")
points(RunningWinSmooth(x, W), col = "red")
}
## f(x) = sin(x) + noise
N <-  1000
W  <- 100
x <- sin(seq(0, 4 * pi, length.out = N)) + rnorm(N, sd = 0.1)
x.smoothed <- RunningWinSmooth(x, W)
\dontrun{
plot(x, type = "l")
points(RunningWinSmooth(x, W), col = "red")
}

}
